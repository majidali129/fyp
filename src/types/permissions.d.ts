// Enum for Permissions
export enum PERMISSIONS {
  // Guest Permissions
  VIEW_FREE_COURSES = "VIEW_FREE_COURSES",
  VIEW_COURSE_PREVIEWS = "VIEW_COURSE_PREVIEWS",
  VIEW_INSTRUCTOR_PROFILES = "VIEW_INSTRUCTOR_PROFILES",
  REGISTER = "REGISTER",

  // Student Permissions
  VIEW_COURSES = "VIEW_COURSES",
  ENROLL_COURSE = "ENROLL_COURSE",
  SUBMIT_QUIZ = "SUBMIT_QUIZ",
  TRACK_PROGRESS = "TRACK_PROGRESS",
  RATE_COURSE = "RATE_COURSE",
  DOWNLOAD_RESOURCES = "DOWNLOAD_RESOURCES",
  JOIN_LIVE_SESSIONS = "JOIN_LIVE_SESSIONS",

  // Instructor Permissions
  CREATE_COURSE = "CREATE_COURSE",
  EDIT_COURSE = "EDIT_COURSE",
  DELETE_COURSE = "DELETE_COURSE",
  VIEW_OWN_STUDENTS = "VIEW_OWN_STUDENTS",
  MANAGE_STUDENT_PROGRESS = "MANAGE_STUDENT_PROGRESS",
  SCHEDULE_LIVE_SESSIONS = "SCHEDULE_LIVE_SESSIONS",
  UPLOAD_RESOURCES = "UPLOAD_RESOURCES",
  VIEW_COURSE_FEEDBACK = "VIEW_COURSE_FEEDBACK",

  // Admin Permissions
  MANAGE_USERS = "MANAGE_USERS",
  ASSIGN_ROLES = "ASSIGN_ROLES",
  MANAGE_PERMISSIONS = "MANAGE_PERMISSIONS",
  APPROVE_INSTRUCTORS = "APPROVE_INSTRUCTORS",
  MANAGE_ALL_COURSES = "MANAGE_ALL_COURSES",
  MODERATE_CONTENT = "MODERATE_CONTENT",
  VIEW_REPORTS = "VIEW_REPORTS",
  MONITOR_ACTIVITY = "MONITOR_ACTIVITY",
  CONFIGURE_SETTINGS = "CONFIGURE_SETTINGS",
  MANAGE_INTEGRATIONS = "MANAGE_INTEGRATIONS",
}

// Enum for Roles
export enum ROLE {
  GUEST = "GUEST",
  STUDENT = "STUDENT",
  INSTRUCTOR = "INSTRUCTOR",
  ADMIN = "ADMIN",
}

// Mapping Roles to Permissions
export const ROLE_PERMISSIONS: Record<ROLE, PERMISSIONS[]> = {
  [ROLE.GUEST]: [
    PERMISSIONS.VIEW_FREE_COURSES,
    PERMISSIONS.VIEW_COURSE_PREVIEWS,
    PERMISSIONS.VIEW_INSTRUCTOR_PROFILES,
    PERMISSIONS.REGISTER,
  ],

  [ROLE.STUDENT]: [
    PERMISSIONS.VIEW_COURSES,
    PERMISSIONS.ENROLL_COURSE,
    PERMISSIONS.SUBMIT_QUIZ,
    PERMISSIONS.TRACK_PROGRESS,
    PERMISSIONS.RATE_COURSE,
    PERMISSIONS.DOWNLOAD_RESOURCES,
    PERMISSIONS.JOIN_LIVE_SESSIONS,
  ],

  [ROLE.INSTRUCTOR]: [
    PERMISSIONS.CREATE_COURSE,
    PERMISSIONS.EDIT_COURSE,
    PERMISSIONS.DELETE_COURSE,
    PERMISSIONS.VIEW_OWN_STUDENTS,
    PERMISSIONS.MANAGE_STUDENT_PROGRESS,
    PERMISSIONS.SCHEDULE_LIVE_SESSIONS,
    PERMISSIONS.UPLOAD_RESOURCES,
    PERMISSIONS.VIEW_COURSE_FEEDBACK,
  ],

  [ROLE.ADMIN]: [
    PERMISSIONS.MANAGE_USERS,
    PERMISSIONS.ASSIGN_ROLES,
    PERMISSIONS.MANAGE_PERMISSIONS,
    PERMISSIONS.APPROVE_INSTRUCTORS,
    PERMISSIONS.MANAGE_ALL_COURSES,
    PERMISSIONS.MODERATE_CONTENT,
    PERMISSIONS.VIEW_REPORTS,
    PERMISSIONS.MONITOR_ACTIVITY,
    PERMISSIONS.CONFIGURE_SETTINGS,
    PERMISSIONS.MANAGE_INTEGRATIONS,
  ],
};

function assignRolePermissions(role: ROLE): PERMISSIONS[] {
  return ROLE_PERMISSIONS[role];
}

// Example: Assign permissions to a new student
const studentPermissions = assignRolePermissions(ROLE.STUDENT);
console.log(studentPermissions);
// Output: ['VIEW_COURSES', 'ENROLL_COURSE', 'SUBMIT_QUIZ', ...]

//   Middleware for Access Control:
// Use the enums in middleware to verify user permissions against the required permission for a route or action.

function hasPermission(
  userPermissions: PERMISSIONS[],
  requiredPermission: PERMISSIONS
): boolean {
  return userPermissions.includes(requiredPermission);
}

// Example: Check if a student can download resources
const canDownload = hasPermission(
  studentPermissions,
  PERMISSIONS.DOWNLOAD_RESOURCES
);
console.log(canDownload); // true
